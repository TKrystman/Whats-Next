import type { UniqueKey, FnVoid } from './types';
import { Listener } from './listener';
import { Observer } from './observer';
export declare class Store {
    __store: Map<UniqueKey, unknown>;
    __initial_store: Map<UniqueKey, unknown>;
    __observer: Observer;
    __listener: Listener;
    static convertStoreToObject(receivedStore: Map<UniqueKey, unknown>): {
        [k: string]: unknown;
    };
    static getStoreKeys(store: Map<UniqueKey, unknown>): UniqueKey[];
    get<S = undefined>(key: UniqueKey): S;
    getMany<T>(fn: (state: any) => T): T;
    _set<S>(key: UniqueKey, newValue: S): void;
    set<S>(key: UniqueKey, newValue: S): void;
    setWithoutNotify<S>(key: UniqueKey, newValue: S): void;
    setInitialValue<S>(key: UniqueKey, value: S): void;
    has(key: UniqueKey): boolean;
    notifySelectors(prevStore: any, newStore: any): void;
    subscribeSelector(listener: (prevStore: any, newStore: any) => void): FnVoid;
    subscribe(key: UniqueKey, listener: FnVoid): FnVoid;
    notify(key: UniqueKey): void;
    reset(): void;
}
