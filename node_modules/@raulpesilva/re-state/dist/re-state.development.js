(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReState = {}, global.React));
})(this, (function (exports, react) { 'use strict';

  //inspired by react redux
  function defaultNoopBatch(callback) {
    callback();
  }

  var batch = defaultNoopBatch;
  var getBatch = function getBatch() {
    return batch;
  };

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);

    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var Listener = /*#__PURE__*/function () {
    function Listener() {
      this._listeners = [];
    }

    var _proto = Listener.prototype;

    _proto.subscribe = function subscribe(listener) {
      var _this = this;

      this._listeners.push(listener);

      return function () {
        var index = _this._listeners.indexOf(listener);

        if (index < 0) return;
        _this._listeners[index] = _this._listeners[_this._listeners.length - 1];
        _this._listeners.length--;
      };
    };

    _proto.notify = function notify(prevStore, newStore) {
      for (var _iterator = _createForOfIteratorHelperLoose(this._listeners), _step; !(_step = _iterator()).done;) {
        var listener = _step.value;
        listener(prevStore, newStore);
      }
    };

    return Listener;
  }();

  var Observer = /*#__PURE__*/function () {
    function Observer() {
      this._listeners = new Map();
    }

    var _proto = Observer.prototype;

    _proto.subscribe = function subscribe(key, listener) {
      var _this = this;

      if (this._listeners.has(key)) {
        var listeners = this._listeners.get(key);

        this._listeners.set(key, [].concat(listeners, [listener]));
      }

      if (!this._listeners.has(key)) {
        this._listeners.set(key, [listener]);
      }

      return function () {
        var listenersCopy = [].concat(_this._listeners.get(key));

        var index = _this._listeners.get(key).indexOf(listener);

        if (index < 0) return;
        listenersCopy[index] = listenersCopy[listenersCopy.length - 1];
        listenersCopy.length--;

        _this._listeners.set(key, listenersCopy);
      };
    };

    _proto.notify = function notify(key) {
      if (this._listeners.has(key)) {
        for (var _iterator = _createForOfIteratorHelperLoose(this._listeners.get(key)), _step; !(_step = _iterator()).done;) {
          var listener = _step.value;
          listener();
        }
      }
    };

    return Observer;
  }();

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  /*eslint-disable no-self-compare */
  var isFunction = function isFunction(data) {
    return typeof data === 'function';
  };

  var Store = /*#__PURE__*/function () {
    function Store() {
      this.__store = new Map();
      this.__initial_store = new Map();
      this.__observer = new Observer();
      this.__listener = new Listener();
    }

    Store.convertStoreToObject = function convertStoreToObject(receivedStore) {
      var obj = Object.fromEntries(receivedStore.entries());
      return obj;
    };

    Store.getStoreKeys = function getStoreKeys(store) {
      return Array.from(store.keys());
    };

    var _proto = Store.prototype;

    _proto.get = function get(key) {
      return this.__store.get(key);
    };

    _proto.getMany = function getMany(fn) {
      if (!isFunction(fn)) {
        throw new TypeError('to select a value in the store it is necessary to pass a function - ex: (store) => store.myKey');
      }

      var objectStore = Store.convertStoreToObject(this.__store);
      return fn(objectStore);
    };

    _proto._set = function _set(key, newValue) {
      var hasKey = this.__store.has(key);

      if (typeof newValue === 'function') {
        var prevValue = this.get(key);
        var value = newValue(prevValue);

        this.__store.set(key, value);

        if (!hasKey) this.setInitialValue(key, value);
      } else {
        this.__store.set(key, newValue);

        if (!hasKey) this.setInitialValue(key, newValue);
      }
    };

    _proto.set = function set(key, newValue) {
      var _this = this;

      var _Store$convertStoreTo = Store.convertStoreToObject(this.__store),
          prevStore = _extends({}, _Store$convertStoreTo);

      this._set(key, newValue);

      var _Store$convertStoreTo2 = Store.convertStoreToObject(this.__store),
          newStore = _extends({}, _Store$convertStoreTo2);

      var batch = getBatch();
      batch(function () {
        _this.notify(key);

        _this.notifySelectors(prevStore, newStore);
      });
    };

    _proto.setWithoutNotify = function setWithoutNotify(key, newValue) {
      this._set(key, newValue);
    };

    _proto.setInitialValue = function setInitialValue(key, value) {
      this.__initial_store.set(key, value);
    };

    _proto.has = function has(key) {
      return this.__store.has(key);
    };

    _proto.notifySelectors = function notifySelectors(prevStore, newStore) {
      this.__listener.notify(prevStore, newStore);
    };

    _proto.subscribeSelector = function subscribeSelector(listener) {
      return this.__listener.subscribe(listener);
    };

    _proto.subscribe = function subscribe(key, listener) {
      return this.__observer.subscribe(key, listener);
    };

    _proto.notify = function notify(key) {
      this.__observer.notify(key);
    };

    _proto.reset = function reset() {
      var _this2 = this;

      this.__store = new Map(this.__initial_store.entries());
      var keys = Store.getStoreKeys(this.__store);
      var batch = getBatch();
      var newStore = Store.convertStoreToObject(this.__store);
      batch(function () {
        keys.forEach(function (key) {
          _this2.notify(key);

          _this2.notifySelectors(undefined, newStore);
        });
      });
    };

    return Store;
  }();

  var store = new Store();
  var resetReState = function resetReState() {
    return store.reset();
  };
  var setReStateInitialValue = function setReStateInitialValue(key, value) {
    return store.setInitialValue(key, value);
  };

  function createGetReState(key) {
    return function () {
      return store.get(key);
    };
  }

  var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? react.useLayoutEffect : react.useEffect;

  function useReState(key, initialValue) {
    var makeState = react.useCallback(function (value) {
      if (store.has(key)) {
        return store.get(key);
      } else {
        store.setWithoutNotify(key, value);
        return store.get(key);
      }
    }, [key]);
    var setState = react.useCallback(function (newValue) {
      store.set(key, newValue);
    }, [key]);

    var _useState = react.useState(makeState(initialValue)),
        reStateValue = _useState[0],
        setReStateValue = _useState[1];

    react.useDebugValue(makeState(initialValue));
    useIsomorphicLayoutEffect(function () {
      var unSub = store.subscribe(key, function () {
        setReStateValue(store.get(key));
      });
      return unSub;
    }, [initialValue, key]);
    return [reStateValue, setState];
  }
  useReState.displayName = 'useReState';

  function createReState(key, initialValue) {
    store.setWithoutNotify(key, initialValue);
    return function useCreatedUseReState() {
      return useReState(key);
    };
  }

  function createReStateDispatch(key) {
    return function (value) {
      return store.set(key, value);
    };
  }

  function createReStateSelect(key) {
    return function useReStateSelect() {
      var _useState = react.useState(store.get(key)),
          reStateValue = _useState[0],
          setReStateValue = _useState[1];

      react.useDebugValue(reStateValue);
      useIsomorphicLayoutEffect(function () {
        var unSub = store.subscribe(key, function () {
          setReStateValue(store.get(key));
        });
        return unSub;
      }, [key]);
      return reStateValue;
    };
  }

  /**
   * Creates a set of methods to use with React.
   * @param name Unique name of the state
   * @param initialValue initial value of the state
   * @param valueOfReset value to reset when calling resetReState
   * @returns a set of methods to use with React
   */
  var createReStateMethods = function createReStateMethods(name, initialValue, valueOfReset) {
    var _methods;

    if (!name) throw new Error('Name is required');
    if (typeof name !== 'string') throw new Error('Name need to be a string');
    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
    var use = createReState(name, initialValue);
    var useSelect = createReStateSelect(name);
    var dispatch = createReStateDispatch(name);
    var get = createGetReState(name);
    if (valueOfReset) setReStateInitialValue(name, valueOfReset.value);
    var methods = (_methods = {}, _methods["use" + capitalizedName] = use, _methods["use" + capitalizedName + "Select"] = useSelect, _methods["dispatch" + capitalizedName] = dispatch, _methods["get" + capitalizedName] = get, _methods["reset" + capitalizedName] = function reset() {
      var _valueOfReset$value;

      return dispatch((_valueOfReset$value = valueOfReset == null ? void 0 : valueOfReset.value) != null ? _valueOfReset$value : initialValue);
    }, _methods);
    return methods;
  };

  var onReStateChange = function onReStateChange(callback, dependencies) {
    dependencies.forEach(function (dependency) {
      return store.subscribe(dependency, callback);
    });
  };

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  function useReStateSelector(selector, isEquals) {
    if (isEquals === void 0) {
      isEquals = shallowEqual;
    }

    var _useState = react.useState(store.getMany(selector)),
        selectorValue = _useState[0],
        setSelectorValue = _useState[1];

    react.useDebugValue(selectorValue);
    useIsomorphicLayoutEffect(function () {
      var unSub = store.subscribeSelector(function (prevStore, newStore) {
        var prevSelection = selector(prevStore);
        var newSelection = selector(newStore);

        if (!isEquals(prevSelection, newSelection)) {
          setSelectorValue(newSelection);
        }
      });
      return unSub;
    }, [selector]);
    return selectorValue;
  }

  exports.createGetReState = createGetReState;
  exports.createReState = createReState;
  exports.createReStateDispatch = createReStateDispatch;
  exports.createReStateMethods = createReStateMethods;
  exports.createReStateSelect = createReStateSelect;
  exports.onReStateChange = onReStateChange;
  exports.resetReState = resetReState;
  exports.setReStateInitialValue = setReStateInitialValue;
  exports.useReState = useReState;
  exports.useReStateSelector = useReStateSelector;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=re-state.development.js.map
